#! /usr/bin/env stack
{-
   stack --resolver lts-10.1 --install-ghc runghc
    --package cryptohash-md5
    --package bytestring
-}

{-# LANGUAGE OverloadedStrings #-}

import qualified Crypto.Hash.MD5 as C
import qualified Data.ByteString as B
import qualified Data.ByteString.Char8 as BC
import qualified Data.List as L
import qualified Data.Word as W

-- 0000 0000 0000 0000 0000 0000 0000
--                          ^ 6th ^ 7th
checkPrefix :: B.ByteString -> Bool
checkPrefix b
  | B.index b 0 == 0
  , B.index b 1 == 0
  , B.index b 2 < 16 = True
  | otherwise        = False

hashes :: [B.ByteString]
hashes = go 0
  where
    seed :: B.ByteString
    seed = "abc" -- "ugkcyxxp"

    ctx :: C.Ctx
    ctx = C.update C.init seed

    go :: Int -> [B.ByteString]
    go n =
      let hash = C.finalize (C.update ctx $ BC.pack (show n)) in
        if checkPrefix hash
           then hash : go (n + 1)
           else go (n + 1)

solve1 :: String
solve1 = L.map (\h -> toHex $ B.index h 2) $ L.take 1 hashes
  where
    toHex :: W.Word8 -> Char
    toHex 0 = '0'; toHex 1 = '1'; toHex 2 = '2'; toHex 3 = '3'
    toHex 4 = '4'; toHex 5 = '5'; toHex 6 = '6'; toHex 7 = '7'
    toHex 8 = '8'; toHex 9 = '9'; toHex 10 = 'a'; toHex 11 = 'b'
    toHex 12 = 'c'; toHex 13 = 'd'; toHex 14 = 'e'; toHex 15 = 'f'

main :: IO ()
main = print solve1
